#include <bits/stdc++.h>
using namespace std;

int f(vector<int> &arr, int i, int j, vector<vector<int>> &dp)
{

    // base condition
    if (i == j)
        return 0;

    if (dp[i][j] != -1)
        return dp[i][j];

    int mini = INT_MAX;

    // partioning loop
    for (int k = i; k <= j - 1; k++)
    {

        int ans = f(arr, i, k, dp) + f(arr, k + 1, j, dp) + arr[i - 1] * arr[k] * arr[j];

        mini = min(mini, ans);
    }

    return mini;
}

int matrixMultiplication(vector<int> &arr, int N)
{

    vector<vector<int>> dp(N, vector<int>(N, 0));

    int i = 1;
    int j = N - 1;
    for (int i = 0; i < n; i++)
    {
        dp[i][i] = 0;
    }
    for (int i = N - 1; i >= 1; i--)
    {
        for (int j = 1; j <= N - 1; j++)
        {
            for (int k = i; k <= j - 1; k++)
            {

                int ans = dp[i][k] + dp[k + 1][j, dp] + arr[i - 1] * arr[k] * arr[j];

                mini = min(mini, ans);
            }
        }
    }
    return dp[1][N-1];
}

int main()
{

    vector<int> arr = {10, 20, 30, 40, 50};

    int n = arr.size();

    cout << "The minimum number of operations is " << matrixMultiplication(arr, n);

    return 0;
}